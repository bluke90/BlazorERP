@using BlazorERP.Data.Entities
@using BlazorERP.Utilities
@inherits ItemStockTableBase

@if (!TableOnly)
{
    <MudCard Elevation="8">
        <MudCardHeader>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Assessment" Size="Size.Medium"/>
                Item Stock
            </MudText>
        </MudCardHeader>
        <MudCardContent>

            <MudTable Class="@TableClass" Style="width: 100%" Items="ItemStockModels" Dense="true" Breakpoint="Breakpoint.SmAndDown" FixedHeader="true" CanCancelEdit="true" IsEditRowSwitchingBlocked="true" 
                      @bind-SelectedItem="SelectedStock" SortLabel="Sort By" OnCommitEditClick="SaveStock" ReadOnly="Readonly">
                <HeaderContent>
                    <MudTh>@(ItemStockTableVariant == ItemStockTableVariant.ByStorageLocation ? "Storage Location" : "Item Name")</MudTh>
                    <MudTh>Qty.</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @switch (ItemStockTableVariant)
                    {
                        case ItemStockTableVariant.ByStorageLocation:
                            <MudTd DataLabel="Storage Location">@context.Stock.StorageLocation.Code

                            </MudTd>
                            break;
                        case ItemStockTableVariant.ByItem:
                            <MudTd DataLabel="Item Name">@context.Item.Name</MudTd>
                            break;
                    }
                    <MudTd DataLabel="Qty.">
                        @context.Stock.OnHand
                        @context.Item.Unit?.Name.Pluralize()
                    </MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    @switch (ItemStockTableVariant)
                    {
                        case ItemStockTableVariant.ByStorageLocation:
                            <MudTd DataLabel="Storage Location">
                                <MudSelect @bind-Value="context.Stock.StorageLocation.Code" Variant="Variant.Text" Dense="true" Required="true"
                                           Text="Select Location">
                                    @foreach (var store in StorageLocations)
                                    {
                                        <MudSelectItem Value="@store.Code">@store.Code</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudTd>
                            break;
                        case ItemStockTableVariant.ByItem:
                            <MudTd DataLabel="Item Name">@context.Item.Name</MudTd>
                            break;
                    }
                    <MudTd DataLabel="Qty.">
                        <MudNumericField Required
                                         @bind-Value="@context.Stock.OnHand"/>
                        @context.Item.Unit?.Name.Pluralize()
                    </MudTd>
                </RowEditingTemplate>
                <FooterContent>
                    @if (!Readonly && ItemStockTableVariant == ItemStockTableVariant.ByStorageLocation)
                    {
                        <td colspan="3">
                            <div class="100%">
                                <MudButton Color="Color.Info" Size="Size.Small" FullWidth="true" OnClick="AddStockClick"
                                           Style="border-top: 1px black solid; background-color: var(--DarkHightlight)">
                                    <MudIcon Class="align-sub" Icon="@Icons.Material.Filled.Add"/>
                                    Add New Stock
                                </MudButton>
                            </div>
                        </td>
                    }
                </FooterContent>
            </MudTable>

        </MudCardContent>

    </MudCard>
}
else
{
    <MudTable Class="@TableClass" Style="width: 100%" Items="ItemStockModels" Dense="true" Breakpoint="Breakpoint.SmAndDown" FixedHeader="true" CanCancelEdit="true" IsEditRowSwitchingBlocked="true" 
              @bind-SelectedItem="SelectedStock" SortLabel="Sort By" OnCommitEditClick="SaveStock" ReadOnly="Readonly">
        <HeaderContent>
            <MudTh>@(ItemStockTableVariant == ItemStockTableVariant.ByStorageLocation ? "Storage Location" : "Item Name")</MudTh>
            <MudTh>Qty.</MudTh>
        </HeaderContent>
        <RowTemplate>
            @switch (ItemStockTableVariant)
            {
                case ItemStockTableVariant.ByStorageLocation:
                    <MudTd DataLabel="Storage Location">@context.Stock.StorageLocation.Code

                    </MudTd>
                    break;
                case ItemStockTableVariant.ByItem:
                    <MudTd DataLabel="Item Name">@context.Item.Name</MudTd>
                    break;
            }
            <MudTd DataLabel="Qty.">
                @context.Stock.OnHand
                @context.Item.Unit?.Name.Pluralize()
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            @switch (ItemStockTableVariant)
            {
                case ItemStockTableVariant.ByStorageLocation:
                    <MudTd DataLabel="Storage Location">
                        <MudSelect @bind-Value="context.Stock.StorageLocation.Code" Variant="Variant.Text" Dense="true" Required="true"
                                   Text="Select Location">
                            @foreach (var store in StorageLocations)
                            {
                                <MudSelectItem Value="@store.Code">@store.Code</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                    break;
                case ItemStockTableVariant.ByItem:
                    <MudTd DataLabel="Item Name">@context.Item.Name</MudTd>
                    break;
            }
            <MudTd DataLabel="Qty.">
                <MudNumericField Required
                                 @bind-Value="@context.Stock.OnHand"/>
                @context.Item.Unit?.Name.Pluralize()
            </MudTd>
        </RowEditingTemplate>
        <FooterContent>
            @if (!Readonly && ItemStockTableVariant == ItemStockTableVariant.ByStorageLocation)
            {
                <td colspan="3">
                    <div class="100%">
                        <MudButton Color="Color.Info" Size="Size.Small" FullWidth="true" OnClick="AddStockClick"
                                   Style="border-top: 1px black solid; background-color: var(--DarkHightlight)">
                            <MudIcon Class="align-sub" Icon="@Icons.Material.Filled.Add"/>
                            Add New Stock
                        </MudButton>
                    </div>
                </td>
            }
        </FooterContent>
    </MudTable>
}