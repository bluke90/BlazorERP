



<!-- Tabbed table with Customers and Sales Orders -->
@using BlazorERP.Data.Entities
@using BlazorERP.Modules.IMS.Components.Dialogs
@using BlazorERP.Modules.IMS.Components.PageComponents
@using BlazorERP.Modules.Services
@inject ImsService Ims
@inject IDialogService Dialog
@inject ISnackbar Snackbar

@page "/IMS/Sales"


<ImsMenu/>

    <MudGrid Justify="Justify.Center"> 
        <MudItem xs="12">
            <MudCard Elevation="10" Outlined="true">
                <MudCardContent Class="p-0">

                    <MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" PanelClass="p-6" Border="true">

                        <MudTabPanel Text="Customers" Icon="@Icons.Material.Filled.Person">

                            <MudTable T="Customer" Items="@_customers" Dense="true" Breakpoint="Breakpoint.SmAndDown"
                                      @bind-SelectedItem="_selectedCustomer" SortLabel="Sort By" OnCommitEditClick="SaveCustomer">
                                
                                <ColGroup>
                                    <col style="width: 5%"/>
                                    <col style="width: 20%"/>
                                    <col style="width: 20%"/>
                                    <col style="width: 20%"/>
                                    <col style="width: 30%"/>
                                    <col style="width: 5%;"/>
                                </ColGroup>

                                <HeaderContent>
                                    <MudTh>ID</MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.Email)">Email</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.Phone)">Phone</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.MailingAddress)">Mailing Address</MudTableSortLabel></MudTh>
                                </HeaderContent>

                                <RowTemplate>
                                    <MudTd DataLabel="ID">@context.CustomerId</MudTd>
                                    <MudTd DataLabel="Name">@context.Name</MudTd>
                                    <MudTd DataLabel="Email">@context.Email</MudTd>
                                    <MudTd DataLabel="Phone">@context.Phone</MudTd>
                                    <MudTd DataLabel="Mailing Address">@context.MailingAddress</MudTd>
                                </RowTemplate>

                                <RowEditingTemplate>

                                    <MudTd DataLabel="ID">@context.CustomerId</MudTd>
                                    <MudTd DataLabel="Name">
                                        <MudTextField @bind-Value="_selectedCustomer.Name" Required/>
                                    </MudTd>
                                    <MudTd DataLabel="Email">
                                        <MudTextField @bind-Value="_selectedCustomer.Email" Required/>
                                    </MudTd>
                                    <MudTd DataLabel="Phone">
                                        <MudTextField @bind-Value="_selectedCustomer.Phone" Required/>
                                    </MudTd>
                                    <MudTd DataLabel="Mailing Address">
                                        <MudTextField @bind-Value="_selectedCustomer.MailingAddress"/>
                                    </MudTd>

                                </RowEditingTemplate>

                                <EditButtonContent Context="button">
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
                                </EditButtonContent>

                            </MudTable>

                        </MudTabPanel>
                        <MudTabPanel Text="Sales Orders" Icon="@Icons.Material.Filled.ShoppingCart">

                            <MudGrid>
                                <MudItem xs="12" Class="text-right">
                                    <MudButton Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small" OnClick="OpenNewSalesOrderDialog">
                                        <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Small" />
                                        New Order
                                    </MudButton>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTable T="SalesOrder" Items="@_salesOrders" Dense="true" Breakpoint="Breakpoint.SmAndDown" Hover="true"
                                              RowClass="cursor-pointer" OnRowClick="SalesOrderSelected">
                                        <HeaderContent>
                                            <MudTh>ID</MudTh>
                                            <MudTh><MudTableSortLabel SortBy="new Func<SalesOrder, object>(x => x.OrderedUtc)">Ordered</MudTableSortLabel></MudTh>
                                            <MudTh><MudTableSortLabel SortBy="new Func<SalesOrder, object>(x => x.Customer!.Name)">Customer</MudTableSortLabel></MudTh>
                                            <MudTh>Status</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="ID">@context.SOId</MudTd>
                                            <MudTd DataLabel="Ordered">@context.OrderedUtc.ToShortDateString()</MudTd>
                                            <MudTd DataLabel="Customer">@context.Customer?.Name</MudTd>
                                            <MudTd DataLabel="Status">@context.Status</MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    @if (_selectedSalesOrder is not null)
                                    {
                                        <MudTable T="SalesOrderLine" Items="@_selectedSalesOrder.SalesOrderLines.ToList()" Dense="true" Breakpoint="Breakpoint.SmAndDown" FixedHeader="true">
                                            <HeaderContent>
                                                <MudTh>Item</MudTh>
                                                <MudTh>Qty</MudTh>
                                                <MudTh>Price</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Item">@context.Item.Name</MudTd>
                                                <MudTd DataLabel="Qty">@context.QtyOrdered</MudTd>
                                                <MudTd DataLabel="Price">$@context.UnitPrice</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.subtitle1" Class="m-2">Select a sales order to view lines.</MudText>
                                    }
                                </MudItem>
                            </MudGrid>

                        </MudTabPanel>


                    </MudTabs>


            



                </MudCardContent>
            </MudCard>
        </MudItem>
    
    </MudGrid>


@code {
    
    private bool blockSwitch = false;

    private List<Customer> _customers = new List<Customer>();

    private List<SalesOrder> _salesOrders = new List<SalesOrder>();
    private SalesOrder? _selectedSalesOrder;
    
    private Customer _selectedCustomer = new Customer();

    private async Task SaveCustomer()
    {
        throw new NotImplementedException();
    }
    
    protected override async Task OnInitializedAsync()
    {
        _customers = await Ims.GetCustomers();
        _salesOrders = await Ims.GetSalesOrders();
    }

    private void SalesOrderSelected(TableRowClickEventArgs<SalesOrder> args)
    {
        _selectedSalesOrder = args.Item;
    }
    
    private async Task OpenNewSalesOrderDialog()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            Position = DialogPosition.Center
        };

        var dialog = await Dialog.ShowAsync<_AddSalesOrder>("New Sales Order", options: options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _salesOrders = await Ims.GetSalesOrders();
            Snackbar.Add("Sales order added", Severity.Success);
        }
    }

}