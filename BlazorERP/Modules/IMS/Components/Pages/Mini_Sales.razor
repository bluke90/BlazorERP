



<!-- Tabbed table with Customers and Sales Orders -->
@using BlazorERP.Components.Global.Components
@using BlazorERP.Data.Entities
@using BlazorERP.Modules.IMS.Components.Dialogs
@using BlazorERP.Modules.IMS.Components.PageComponents
@using BlazorERP.Modules.Services
@inject ImsService Ims
@inject IDialogService Dialog
@inject ISnackbar Snackbar

@page "/IMS/Sales"

<PageTitle>IMS Sales</PageTitle>

<ImsMenu/>

    <MudGrid> 
        <MudItem xs="12">
            <MudCard Elevation="10" Outlined="true">
                <MudCardContent Class="p-0">

                    <MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" PanelClass="p-6" Border="true">

                        <MudTabPanel Text="Customers" Icon="@Icons.Material.Filled.Person">

                            <MudTable T="Customer" Items="@_customers" Dense="true"
                                      @bind-SelectedItem="_selectedCustomer" SortLabel="Sort By" OnCommitEditClick="SaveCustomer">
                                
                                <ColGroup>
                                    <MudHidden Breakpoint="Breakpoint.MdAndDown">
                                        <col style="width: 5%"/>
                                        <col style="width: 20%"/>
                                        <col style="width: 20%"/>
                                        <col style="width: 20%"/>
                                        <col style="width: 30%"/>
                                        <col style="width: 5%;"/>
                                    </MudHidden>
                                </ColGroup>

                                <HeaderContent>
                                    <MudTh>ID</MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.Email)">Email</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.Phone)">Phone</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.MailingAddress)">Mailing Address</MudTableSortLabel></MudTh>
                                </HeaderContent>

                                <RowTemplate>
                                    <MudTd DataLabel="ID">@context.CustomerId</MudTd>
                                    <MudTd DataLabel="Name">@context.Name</MudTd>
                                    <MudTd DataLabel="Email">@context.Email</MudTd>
                                    <MudTd DataLabel="Phone">@context.Phone</MudTd>
                                    <MudTd DataLabel="Mailing Address">@context.MailingAddress</MudTd>
                                </RowTemplate>

                                <RowEditingTemplate>

                                    <MudTd DataLabel="ID">@context.CustomerId</MudTd>
                                    <MudTd DataLabel="Name">
                                        <MudTextField @bind-Value="_selectedCustomer.Name" Required/>
                                    </MudTd>
                                    <MudTd DataLabel="Email">
                                        <MudTextField @bind-Value="_selectedCustomer.Email" Required/>
                                    </MudTd>
                                    <MudTd DataLabel="Phone">
                                        <MudTextField @bind-Value="_selectedCustomer.Phone" Mask="@(new PatternMask(@"(000) - 000 - 000"))" Required/>
                                    </MudTd>
                                    <MudTd DataLabel="Mailing Address">
                                        <MudTextField @bind-Value="_selectedCustomer.MailingAddress"/>
                                    </MudTd>

                                </RowEditingTemplate>

                                <EditButtonContent Context="button">
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
                                </EditButtonContent>
                                
                                <FooterContent>
                                    <td colspan="5">
                                        <div style="width: 100%; text-align: center;">
                                            <MudButton Size="Size.Small" FullWidth="true" Color="Color.Info" Variant="Variant.Filled">
                                                <MudIcon Class="align-sub" Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" />
                                                Add New Customer
                                            </MudButton>
                                        </div>
                                    </td>
                                </FooterContent>

                            </MudTable>

                        </MudTabPanel>
                        <!-- Sales Orders Tab -->
                        <MudTabPanel Text="Sales Orders" Icon="@Icons.Material.Filled.ShoppingCart">

                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="12" md="6">
                                    <MudTable Class="dense-toolbar" T="SalesOrder" Items="@_salesOrders" Dense="true" Hover="true"
                                              RowClass="cursor-pointer" OnRowClick="SalesOrderSelected">
                                        <ToolBarContent>
                                            <MudText Typo="Typo.subtitle1">
                                                <MudIcon Class="align-sub" Icon="@Icons.Material.Filled.Outbound" Size="Size.Medium"/>
                                                Orders
                                            </MudText>
                                        </ToolBarContent>
                                        <HeaderContent>
                                            <MudTh>ID</MudTh>
                                            <MudTh><MudTableSortLabel SortBy="new Func<SalesOrder, object>(x => x.OrderedUtc)">Ordered</MudTableSortLabel></MudTh>
                                            <MudTh><MudTableSortLabel SortBy="new Func<SalesOrder, object>(x => x.Customer!.Name)">Customer</MudTableSortLabel></MudTh>
                                            <MudTh>Status</MudTh>
                                            <MudTh></MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="ID">@context.SOId</MudTd>
                                            <MudTd DataLabel="Ordered">@context.OrderedUtc.ToShortDateString()</MudTd>
                                            <MudTd DataLabel="Customer">@context.Customer?.Name</MudTd>
                                            <MudTd DataLabel="Status">@context.OrderStatus?.Name</MudTd>
                                            <MudTd DataLabel="">
                                                <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="@(() => OpenActionMenu(context))">Actions</MudButton>
                                            </MudTd>
                                        </RowTemplate>
                                        <FooterContent>
                                            <td colspan="5">
                                                <div style="width: 100%; text-align: center;">
                                                    <MudButton Size="Size.Small" FullWidth="true" Color="Color.Info" Variant="Variant.Filled" OnClick="@( () => OpenNewSalesOrderDialog())">
                                                        <MudIcon Class="align-sub" Icon="@Icons.Material.Filled.Add" Color="Color.Secondary"/>
                                                        Add New Sales Order
                                                    </MudButton>
                                                </div>
                                            </td>
                                        </FooterContent>
                                    </MudTable>
                                </MudItem>
                                <MudItem xs="12" md="@dynamicMdSize" Class="rpl-0">
                                    <MudPaper Elevation="4" Class="@ActionMenuClass" Height="100%" Width="100%">
                                        <MudText Class="paper-menu-header" Typo="Typo.subtitle2">
                                            <MudIcon Class="align-sub" Icon="@Icons.Material.Filled.Task" Size="Size.Small"/>
                                            PO# @_selectedSalesOrder?.SOId  Quick Actions
                                        </MudText>
                                        <MudMenuItem Class="paper-menu-item" OnClick="@(() => OpenSelectStatusDialog(_selectedSalesOrder?.OrderStatus))">
                                            <MudIcon Icon="@Icons.Material.Filled.ChangeCircle" Class="align-sub" Color="Color.Warning"/>
                                            Change Status
                                        </MudMenuItem>
                                        <MudMenuItem Class="paper-menu-item" OnClick="@(() => MarkCompleted())">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="align-sub" Color="Color.Success"/>
                                            Mark as Completed
                                        </MudMenuItem>
                                        <MudMenuItem Class="paper-menu-item" OnClick="@(() => OpenNewSalesOrderDialog(false))">
                                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="align-sub" Color="Color.Info"/>
                                            Edit Order
                                        </MudMenuItem>
                                    </MudPaper>
                                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                        <MudStack Spacing="0" Row="true" Justify="Justify.FlexStart" Wrap="Wrap.NoWrap" AlignItems="AlignItems.Center" Style="margin-left: 2px; height: 100%; border-left: var(--mud-palette-black) 4px solid; background-color: var(--mud-palette-surface)">
                                            <MudIcon Class="ml-2" Size="Size.Large" Color="Color.Secondary" Icon="@Icons.Material.Filled.RequestPage"/>
                                            <MudIcon Size="Size.Large" Color="Color.Secondary" Icon="@Icons.Material.Filled.ArrowRight"/>
                                        </MudStack>
                                    </MudHidden>
                                    <MudHidden Breakpoint="Breakpoint.SmAndUp">
                                        <MudStack Spacing="0" Justify="Justify.Center" Wrap="Wrap.NoWrap" AlignItems="AlignItems.Center" Style="margin-left: 2px; width:100%; border-top: var(--mud-palette-black) 4px solid; background-color: var(--mud-palette-surface)">
                                            <MudIcon Class="mt-1" Size="Size.Large" Color="Color.Secondary" Icon="@Icons.Material.Filled.RequestPage"/>
                                            <MudIcon Size="Size.Large" Color="Color.Secondary" Icon="@Icons.Material.Filled.KeyboardArrowDown"/>
                                        </MudStack>
                                    </MudHidden>

                                </MudItem>
                                <MudItem xs="12" md="4" Class="rpl-0 text-center">
                                    @if (_selectedSalesOrder is not null)
                                    {
                                        <MudTable Class="dense-toolbar" T="SalesOrderLine" Items="@_selectedSalesOrder.SalesOrderLines.ToList()"Dense="true" FixedHeader="true">
                                            <ToolBarContent>
                                                    <MudText Typo="Typo.subtitle1">
                                                        <MudIcon Class="align-sub" Size="Size.Medium" Icon="@Icons.Material.Filled.Style"/>
                                                        Lines for Sales Order #@(_selectedSalesOrder.SOId)
                                                    </MudText>
                                            </ToolBarContent>
                                            
                                            <HeaderContent>
                                                <MudTh>Item</MudTh>
                                                <MudTh>Qty</MudTh>
                                                <MudTh>Price</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Item">@context.Item.Name</MudTd>
                                                <MudTd DataLabel="Qty">@context.QtyOrdered</MudTd>
                                                <MudTd DataLabel="Price">$@context.UnitPrice</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudItem xs="12" md="4" Class="rpl-0 align-content-center">
                                            <MudChip T="string" Color="Color.Dark" tabindex="-1" Class="p-2 m-2">
                                                <MudText Typo="Typo.body1" Color="Color.Default">
                                                    <MudIcon Class="align-top" Icon="@Icons.Material.Filled.Info" Size="Size.Medium" />
                                                    Select a Purchase Order View Lines
                                                </MudText>
                                            </MudChip>
                                        </MudItem>
                                    }
                                </MudItem>
                            </MudGrid>

                        </MudTabPanel>


                    </MudTabs>


            



                </MudCardContent>
            </MudCard>
        </MudItem>
    
    </MudGrid>


@code {
    
    private int dynamicMdSize = 1; // Default size for medium screens
    private string ActionMenuClass = "paper-menu bg-surface hidden";
    private bool showActionMenu = false;
    
    private bool blockSwitch = false;

    private List<Customer> _customers = new List<Customer>();

    private List<SalesOrder> _salesOrders = new List<SalesOrder>();
    private SalesOrder? _selectedSalesOrder;
    
    private Customer _selectedCustomer = new Customer();
    
    private void OpenActionMenu(SalesOrder order)
    {
        var baseClass = "paper-menu bg-surface";
        _selectedSalesOrder = order;
        showActionMenu = !showActionMenu;
        
        switch (showActionMenu) {
            case true:
                ActionMenuClass = baseClass;
                dynamicMdSize = 2;
                break;

        }
    }

    private async Task SaveCustomer()
    {
        throw new NotImplementedException();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _customers = await Ims.GetCustomers();
        _salesOrders = await Ims.GetSalesOrders();
    }
    
    private async Task MarkCompleted()
    {
        if (_selectedSalesOrder is null)
        {
            Snackbar.Add("No Purchase Order selected", Severity.Error);
            return;
        }

        _selectedSalesOrder.OrderStatusId = 5; // completed status
        await Ims.UpdateSalesOrder(_selectedSalesOrder);
        _salesOrders = await Ims.GetSalesOrders();
        Snackbar.Add("Purchase Order marked as completed", Severity.Success);
    }

    private void SalesOrderSelected(TableRowClickEventArgs<SalesOrder> args)
    {
        _selectedSalesOrder = args.Item;
    }
    
    private async Task OpenSelectStatusDialog(OrderStatus selected)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center
        };

        var statuses = await Ims.GetOrderStatuses();
        
        var parameters = new DialogParameters<SelectDialog>
        {
            { x => x.SelectedItem, selected ?? statuses.FirstOrDefault() },
            { x => x.Items, statuses.ToList<object>() },
            { x => x.TextProperty, "Name" },
            { x => x.ValueProperty, "OrderStatusId" }
        };
        
        var dialog = await Dialog.ShowAsync<SelectDialog>("Select Order Status", options: options, parameters: parameters);
        var result = await dialog.Result;
        if (!result.Canceled && (OrderStatus)result.Data != null)
        {
            var selectedStatus = (OrderStatus)result.Data;
            _selectedSalesOrder.OrderStatusId = selectedStatus.OrderStatusId;
            await Ims.UpdateSalesOrder(_selectedSalesOrder);
            Snackbar.Add("Purchase Order status updated", Severity.Success);
        }
        
    }
    
    private async Task OpenNewSalesOrderDialog(bool isNew = true)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            Position = DialogPosition.Center
        };

        
        var parameters = new DialogParameters<_AddSalesOrder> { { x=> x._newOrder, isNew ? null : _selectedSalesOrder } };

        var dialog = await Dialog.ShowAsync<_AddSalesOrder>("New Sales Order", options: options, parameters: parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _salesOrders = await Ims.GetSalesOrders();
            Snackbar.Add("Sales order added", Severity.Success);
        }
    }

}